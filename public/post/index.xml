<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Another developer blog</title>
    <link>/post/</link>
    <description>Recent content in Posts on Another developer blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jul 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Write user stories</title>
      <link>/blog/2013/07/01/write-user-stories/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/07/01/write-user-stories/</guid>
      <description>

&lt;h1 id=&#34;story-always-involve-a-user-customer:4085a9812ef43743583343a2bd0eae33&#34;&gt;Story always involve a User/Customer&lt;/h1&gt;

&lt;p&gt;A story is associated to a clearly defined user/customer. If not, maybe this
feature will benefit nobody and should not be implemented&lt;/p&gt;

&lt;p&gt;Before writing stories, we can define
&lt;a href=&#34;http://www.romanpichler.com/blog/agile-product-innovation/persona-template-for-agile-product-management/&#34;&gt;personas&lt;/a&gt;.
that will represent our customers. Then we connect each story to the right
persona.&lt;/p&gt;

&lt;h1 id=&#34;level-of-details:4085a9812ef43743583343a2bd0eae33&#34;&gt;Level of details&lt;/h1&gt;

&lt;p&gt;It&amp;rsquo;s hard to get stories&amp;rsquo;s details correcly. A story should not be too vague and
shoud not prescribe the solution because of too much details (should answer
&lt;em&gt;what&lt;/em&gt; and not &lt;em&gt;how&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Steps to define details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start new features with &lt;strong&gt;&lt;a href=&#34;http://www.romanpichler.com/blog/user-stories/epics-and-ready-stories/&#34;&gt;epics&lt;/a&gt;&lt;/strong&gt;:
coarse-grained stories. &lt;strong&gt;Epics&lt;/strong&gt; capture an idea.&lt;/li&gt;
&lt;li&gt;Split epic into more detailed user stories.&lt;/li&gt;
&lt;li&gt;When picking stories for a sprint, these stories should be &lt;strong&gt;&lt;a href=&#34;http://www.romanpichler.com/blog/user-stories/epics-and-ready-stories/&#34;&gt;ready stories&lt;/a&gt;&lt;/strong&gt; that are clear, feasible and testable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Iteratively refining stories keeps your backlog concise which will help you add
new insights.&lt;/p&gt;

&lt;h1 id=&#34;involve-the-team:4085a9812ef43743583343a2bd0eae33&#34;&gt;Involve the team&lt;/h1&gt;

&lt;p&gt;The team should be involved in writing story details in order to get them ready
for the next sprint.&lt;/p&gt;

&lt;h1 id=&#34;acceptance-and-testing:4085a9812ef43743583343a2bd0eae33&#34;&gt;Acceptance and testing&lt;/h1&gt;

&lt;p&gt;Every story should contain &lt;strong&gt;&lt;a href=&#34;http://www.romanpichler.com/blog/user-stories/agile-nonfunctional-requirements/&#34;&gt;acceptance criteria&lt;/a&gt;&lt;/strong&gt;
that will describe the conditions needed to validate a story. The criteria
make it more precise and testable.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;As a conference attendee
I want to be able to register online
In order to register quickly
And cut down on paperwork
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the above example, the acceptance criteria could include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A user cannot submit a form without completing all the mandatory fields&lt;/li&gt;
&lt;li&gt;Information from the form is stored in the registrations database&lt;/li&gt;
&lt;li&gt;Protection against spam is working&lt;/li&gt;
&lt;li&gt;Payment can be made via credit card&lt;/li&gt;
&lt;li&gt;An acknowledgment email is sent to the user after submitting the form.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Epics&lt;/strong&gt; do not need acceptance criteria but &lt;strong&gt;ready stories&lt;/strong&gt; should. Defining
acceptance criteria with the team during scrums will help them understand the
feature from the user&amp;rsquo;s point of view/perspective.&lt;/p&gt;

&lt;h3 id=&#34;note:4085a9812ef43743583343a2bd0eae33&#34;&gt;Note&lt;/h3&gt;

&lt;p&gt;I write this post after reading this &lt;a href=&#34;http://java.dzone.com/articles/5-common-user-story-mistakes&#34;&gt;article&lt;/a&gt; from &lt;a href=&#34;http://www.romanpichler.com/blog/&#34;&gt;Roman Pichler&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Access hardware register safely</title>
      <link>/blog/2012/06/25/access-hardware-register-safely/</link>
      <pubDate>Mon, 25 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>/blog/2012/06/25/access-hardware-register-safely/</guid>
      <description>

&lt;p&gt;In embedded development, there is a task we do every day: accessing hardware via
a register mapped to a known physical memory address.&lt;/p&gt;

&lt;h1 id=&#34;naive-declaration:7f24d4c306244bcb7fb73e435ff27119&#34;&gt;Naive declaration&lt;/h1&gt;

&lt;p&gt;I have declared such a register for years this way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;uint8 * p_reg = (uint8 *) 0x00080000;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which can be readen as &lt;strong&gt;p_reg&lt;/strong&gt; is a &lt;strong&gt;pointer&lt;/strong&gt; to a &lt;strong&gt;8-bit unsigned integer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You modify the content of this register this way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;*p_reg = REG_ACTIVATE_HARDWARE;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Really easy, but this code can be &lt;em&gt;optimized&lt;/em&gt; to take into account two aspects
of an harware register:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;address of the register will never be modified&lt;/li&gt;
&lt;li&gt;register content can be modified outside of process at any time (by hardware itself)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;register-address-will-not-change:7f24d4c306244bcb7fb73e435ff27119&#34;&gt;Register address will not change&lt;/h1&gt;

&lt;p&gt;Indeed with the previous declaration, compiler will not warn us if we make a
typo and write the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;p_reg = REG_ACTIVATE_HARDWARE;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;because we doesn&amp;rsquo;t declare the pointer as constant with the &lt;strong&gt;const&lt;/strong&gt; keyword.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;uint8 * const p_reg = (uint8 *) 0x00080000;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;readen as &lt;strong&gt;p_reg&lt;/strong&gt; is a &lt;strong&gt;constant pointer to 8bit unsigned integer&lt;/strong&gt;. This
mean that you can change content of &lt;strong&gt;p_reg&lt;/strong&gt; register but not the pointer
(address where it point). So with the last declaration, if we miss the pointer
dereference then compilation will end up with an error.&lt;/p&gt;

&lt;h1 id=&#34;register-is-updated-outside-of-process:7f24d4c306244bcb7fb73e435ff27119&#34;&gt;Register is updated outside of process&lt;/h1&gt;

&lt;p&gt;Moreover when optimizing generated code with GCC we can have strange behavior.
For example, if we write some code to loop reading the register content to check
that status has been modified&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;uint8 * p_reg = (uint8 *) 0x1;

// Wait for register to become non-zero
while (*p_reg == 0) { } // Do something else
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generated assemble code will become something like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nasm&#34;&gt;mov ptr, #0x1
mov a, @ptr
loop:
  bz loop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which en up in an infinite loop. Indeed, &lt;strong&gt;p_reg&lt;/strong&gt; variable is set once, so GCC
optimize by not reading it every time. We should use the &lt;strong&gt;volatile&lt;/strong&gt; keyword to
indicate that this variable can be changed at any time by outside of this process.&lt;/p&gt;

&lt;p&gt;If the declaration use the &lt;strong&gt;volatile&lt;/strong&gt; keyword&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;uint8 volatile p_reg = (uint8 volatile *)0x1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then the generated assembler (even if optimized) become something like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nasm&#34;&gt;mov ptr, #0x1
loop:
  mov a, @ptr
  bz loop
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;final-declaration:7f24d4c306244bcb7fb73e435ff27119&#34;&gt;Final declaration&lt;/h1&gt;

&lt;p&gt;I finally use the following declaration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;uint8 volatile * const p_reg = (uint8 *) 0x00080000;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which can be read as &lt;strong&gt;p_reg&lt;/strong&gt; is a &lt;strong&gt;constant pointer&lt;/strong&gt; to a &lt;strong&gt;volatile 8-bit unsigned integer&lt;/strong&gt; which is exactly what a register is.&lt;/p&gt;

&lt;h3 id=&#34;note:7f24d4c306244bcb7fb73e435ff27119&#34;&gt;note&lt;/h3&gt;

&lt;p&gt;You can have a complete understanding of the mecanism used here reading
&lt;a href=&#34;http://embeddedgurus.com/barr-code/2012/01/combining-cs-volatile-and-const-keywords/&#34;&gt;Combining C&amp;rsquo;s volatile and const Keywords&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>